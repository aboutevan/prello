openapi: 3.0.0
info:
  title: Prello API
  version: '1.0'
servers:
- url: http://127.0.0.1:5000/api
security:
- jwt: []

paths:
  /register:
    post:
      operationId: src.users.controller.register
      summary: Registers a user
      requestBody:
        description: Registers user with email and password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:     # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: string
              required:
              - email
              - password
      responses:
        201:
          description: User successfully created
      security: []

  /login:
    post:
      operationId: src.users.controller.login
      summary: Authorizes login
      requestBody:
        description: Logs a user in with email and password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:     # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: string
              required:
              - email
              - password
      responses:
        204:
          description: User logged in
      security: []

  /logout:
    get:
      operationId: src.users.controller.logout
      summary: Logs a user out
      responses:
        200:
          description: User logged out
      security: []

  /reset-password:
    post:
      operationId: src.users.controller.reset_password_request
      summary: Sends a reset email
      requestBody:
        description: Sends an email with a token for resetting password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:     # <!--- form field name
                  type: string
              required:
              - email
      responses:
        204:
          description: Password reset link sent
      security: []

  /reset-password/{token}:
    get:
      operationId: src.users.controller.reset_password
      description: Somwthing
      parameters:
      - in: path
        name: token
        required: true
        schema:
          type: integer
        description: The user token
      responses:
        200:
          description: sdfasdf
      security: []


  # User routes
  ###############
  /{uid}:
    get:
      operationId: src.users.controller.get_profile
      description: Read a User's profile
      parameters:
      - in: path
        name: uid
        required: true
        schema:
          type: integer
        description: The User's ID
      responses:
        200:
          description: Successful Profile read

  /{uid}/boards:
    get:
      operationId: src.users.controller.get_boards
      description: Read Boards belonging to user
      parameters:
      - in: path
        name: uid
        required: true
        schema:
          type: integer
        description: The User's ID
      responses:
        200:
          description: Successful User boards read

  # Board routes
  ###############
  /boards:
    post:
      operationId: src.boards.controller.create
      description: Create a board
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                uid:
                  type: integer
              required:
              - name
              - uid
      responses:
        201:
          description: Successful Board Creation

  /boards/{id}:
    get:
      operationId: src.boards.controller.get
      description: Read board by id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: The Board's ID
      responses:
        200:
          description: Successful read of board by id

    put:
      operationId: src.boards.controller.put
      description: Update a board's name
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: the board id
      requestBody:
        description: New name for the board
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
      responses:
        200:
          description: Successfully updated the board's name

    delete:
      operationId: src.boards.controller.delete
      description: Delete a Todo by id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: the board id
      responses:
        204:
          description: Todo deleted

  # Lists routes
  ###############
  /lists:
    post:
      operationId: src.lists.controller.create
      description: Create a list
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                board_id:
                  type: integer
              required:
              - name
              - board_id
      responses:
        201:
          description: Successful List creation

    get:
      operationId: src.lists.controller.get_all_in_board
      description: Get all lists for a board
      parameters:
      - in: query
        name: board
        schema:
          type: integer
      responses:
        200:
          description: Successful read of board's lists


  /lists/{id}:
    get:
      operationId: src.lists.controller.get
      description: Read list belonging to list
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: The list's id
      responses:
        200:
          description: Successful read of list

    put:
      operationId: src.lists.controller.put
      description: Update a list's name and/or order
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: the list id
      requestBody:
        description: New name and/or order for the list
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                order:
                  type: number
                name:
                  type: string
      responses:
        200:
          description: Successfully updated the list's name/order

    delete:
      operationId: src.lists.controller.delete
      description: Delete a List by id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: the list id
      responses:
        204:
          description: List deleted

  ################################################
  # Tasks
  /tasks:
    post:
      operationId: src.tasks.controller.create
      description: Create a task
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                board_id:
                  type: integer
              required:
              - name
              - list_id
      responses:
        201:
          description: Successful task creation

    get:
      operationId: src.tasks.controller.get_all_in_list
      description: Get all tasks for a list
      parameters:
      - in: query
        name: list
        schema:
          type: integer
      responses:
        200:
          description: Successful read of lists's tasks

  /tasks/{id}:
    get:
      operationId: src.tasks.controller.get
      description: Read task
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: The tasks's id
      responses:
        200:
          description: Successful read of task

    put:
      operationId: src.tasks.controller.put
      description: Update a task's name and/or order
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: the task id
      requestBody:
        description: New name and/or order for the task
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                order:
                  type: number
                name:
                  type: string
                list_id:
                  type: number
      responses:
        200:
          description: Successfully updated the task's name/order

    delete:
      operationId: src.tasks.controller.delete
      description: Delete a task by id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: the task id
      responses:
        204:
          description: Task deleted

  ################################################

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: src.users.model.User.decode_token