openapi: 3.0.0
info:
  title: Prello API
  version: '1.0'
servers:
  - url: http://127.0.0.1:5000/api
paths:

  /register:
    post:
      operationId: src.users.controller.register
      summary: Registers a user
      requestBody:
        description: Registers user with email and password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:     # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: string
              required:
                - email
                - password
      responses:
        201:
          description: User successfully created

  /login:
    post:
      operationId: src.users.controller.login
      summary: Authorizes login
      requestBody:
        description: Logs a user in with email and password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:     # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: User logged in

  /{uid}:
    get:
      operationId: src.users.controller.get_profile
      description: Read a User's profile
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: integer
          description: The User's ID
      responses:
        200:
          description: Successful Profile read
      security:
        - jwt: []

  /{uid}/boards:
    get:
      operationId: src.users.controller.get_boards
      description: Read Boards belonging to user
      parameters:
      - in: path
        name: uid
        required: true
        schema:
          type: integer
        description: The User's ID
      responses:
        200:
          description: Successful User boards read
      security:
      - jwt: []



  /boards:
    post:
      operationId: src.boards.controller.create
      description: Create a board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                uid:
                  type: integer
              required:
                - name
                - uid
      responses:
        201:
          description: Successful Board Creation
      security:
        - jwt: []

#    get:
#      operationId: src.boards.controller.get_all_boards_for_user
#      description: Read the list of all boards the user is a member of
#      parameters:
#      - in: query
#        name: uid
#        required: true
#        schema:
#          type: integer
#      responses:
#        200:
#          description: Successful Boards read
#      security:
#      - jwt: []


  /todos:
    post:
      operationId: src.todos.controller.create
      description: Create a Todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:     # <!--- form field name
                  type: string
                created_by:    # <!--- form field name
                  type: integer
              required:
                - name
                - created_by
      responses:
        201:
          description: Successful Todo creation
      security:
        - jwt: []

    get:
      operationId: src.todos.controller.get_all
      description: Read the list of Todos
      parameters:
        - in: query
          name: created_by
          schema:
            type: integer
          description: Th
      responses:
        200:
          description: Successful Todos read
      security:
        - jwt: []

  /todos/{id}:
    get:
      operationId: src.todos.controller.get
      description: Read a Todo by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The Todo id
      responses:
        200:
          description: Successful Todo read
      security:
        - jwt: []

    delete:
      operationId: src.todos.controller.delete
      description: Delete a Todo by id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The puppy id
      responses:
        200:
          description: Todo deleted
      security:
      - jwt: []


components:
  securitySchemes:
#    oauth2:
#      type: oauth2
#      x-tokenInfoFunc: src.auth.operations.authenticate
#      flows:
#        implicit:
#          scopes: {}

    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: src.users.model.User.decode_token