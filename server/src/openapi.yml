openapi: 3.0.0
info:
  title: Prello API
  version: '1.0'
servers:
  - url: http://127.0.0.1:5000/api
security:
  - jwt: []

paths:
  /register:
    post:
      operationId: src.users.controller.register
      summary: Registers a user
      requestBody:
        description: Registers user with email and password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:     # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: string
              required:
                - email
                - password
      responses:
        201:
          description: User successfully created
      security: []

  /login:
    post:
      operationId: src.users.controller.login
      summary: Authorizes login
      requestBody:
        description: Logs a user in with email and password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:     # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: string
              required:
                - email
                - password
      responses:
        204:
          description: User logged in
      security: []

  /logout:
    get:
      operationId: src.users.controller.logout
      summary: Logs a user out
      responses:
        200:
          description: User logged out
      security: []

  /{uid}:
    get:
      operationId: src.users.controller.get_profile
      description: Read a User's profile
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: integer
          description: The User's ID
      responses:
        200:
          description: Successful Profile read

  /{uid}/boards:
    get:
      operationId: src.users.controller.get_boards
      description: Read Boards belonging to user
      parameters:
      - in: path
        name: uid
        required: true
        schema:
          type: integer
        description: The User's ID
      responses:
        200:
          description: Successful User boards read

  # Board routes
  ###############
  /boards:
    post:
      operationId: src.boards.controller.create
      description: Create a board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                uid:
                  type: integer
              required:
                - name
                - uid
      responses:
        201:
          description: Successful Board Creation

  /boards/{id}:
    get:
      operationId: src.boards.controller.get
      description: Read board by id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: The Board's ID
      responses:
        200:
          description: Successful read of board by id

    put:
      operationId: src.boards.controller.put
      description: Update a board's name
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: the board id
      requestBody:
        description: New name for the board
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        200:
          description: Successfully updated the board's name

    delete:
      operationId: src.boards.controller.delete
      description: Delete a Todo by id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: the board id
      responses:
        204:
          description: Todo deleted

  /lists:
    post:
      operationId: src.lists.controller.create
      description: Create a list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                board_id:
                  type: integer
              required:
                - name
                - board_id
      responses:
        201:
          description: Successful List creation

  /lists/{board_id}/{id}:
    put:
      operationId: src.lists.controller.put
      description: Update a list's name and/or order
      parameters:
        - name: board_id
          in: path
          required: true
          schema:
            type: integer
          description: the parent's board id
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: the list id
      requestBody:
        description: New name and/or order for the list
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                order:
                  type: number
                name:
                  type: string
      responses:
        200:
          description: Successfully updated the list's name/order

  /todos:
    post:
      operationId: src.todos.controller.create
      description: Create a Todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:     # <!--- form field name
                  type: string
                created_by:    # <!--- form field name
                  type: integer
              required:
                - name
                - created_by
      responses:
        201:
          description: Successful Todo creation

    get:
      operationId: src.todos.controller.get_all
      description: Read the list of Todos
      parameters:
        - in: query
          name: created_by
          schema:
            type: integer
          description: Th
      responses:
        200:
          description: Successful Todos read

  /todos/{id}:
    get:
      operationId: src.todos.controller.get
      description: Read a Todo by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The Todo id
      responses:
        200:
          description: Successful Todo read

    delete:
      operationId: src.todos.controller.delete
      description: Delete a Todo by id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The puppy id
      responses:
        204:
          description: Todo deleted

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: src.users.model.User.decode_token